<?php
/**
 * @package Actor
 */

/**
 * @package Actor
 * @subpackage Live
 */
class Actor_Live_Registrator
    extends Actor_Live
    implements Actor_Interface_Registrator
{
    const REG_HOST = 'https://signup.live.com';

    const REG_FORM_URL   = '/signup.aspx';
    const REG_SUBMIT_URL = '/create.aspx';

    const CHECK_CREDENTIAL_URL = '/checkavail.aspx';


    /**
     * Updates locality details
     *
     * @param array
     * @return array
     */
    protected function _update_location(array $details)
    {
        do {
            if (!$location = $this->call_process_method('get_location', 'US')) {
                throw new Actor_Live_Exception(
                    'No US locations to use',
                    Actor_Exception::INVALID_ARGUMENT
                );
            } else {
                $location['region_id'] = $this->call_process_method(
                    'get_region_id',
                    $location['country'],
                    $location['region']
                );
            }
        } while (!$location['region_id']);
        return array_merge($details, $location);
    }

    protected function _encrypt($pass, array $enc_keys=null, $sqsa='', $type='pwd', $new_pass='')
    {
        if (!$enc_keys && !($enc_keys = $this->_get_encryption_keys())) {
            return false;
        }

        $this->log(rtrim("Encrypting {$type} {$pass} {$sqsa} {$new_pass}"));

        if ($s = JavaScript_Executor::execute(
            str_replace('.php', '.encryptor.js', __FILE__),
            array($enc_keys['Key'],
                  $enc_keys['randomNum'],
                  $pass,
                  $sqsa,
                  $type,
                  $new_pass)
        )) {
            return array('keys' => $enc_keys,
                         'data' => $s);
        } else {
            $this->log('Encryption failed, check the corresponding script',
                       Log_Abstract::LEVEL_ERROR);
            return false;
        }
    }

    /**
     * Encrypts Live.com sign up data
     *
     * @return string
     */
    protected function _encrypt_signup_data(array $enc_keys, array $captcha_data)
    {
        $this->log('Encrypting sign up data');
        $this->log($enc_keys, Log_Abstract::LEVEL_DEBUG);
        $this->log($captcha_data, Log_Abstract::LEVEL_DEBUG);

        $data = array(isset($this->_form['imembernameeasi'])
            ? $this->_form['imembernameeasi']
            : "{$this->_form['imembernamelive']}@{$this->_form['idomain']}");

        $data[] = @$this->_form['iAltEmail'];
        $data[] = '';

        if (!empty($this->_form['iSQ']) && !empty($this->_form['iSA'])) {
            $enc_type = 'pwdsa';
            $data[] = $this->_form['iSQ'];
        } else {
            $enc_type = 'pwd';
        }
        $s = $enc_keys
            ? $this->_encrypt($this->_form['iPwd'], $enc_keys, $this->_form['iSA'], $enc_type)
            : null;
        if (!$s) {
            throw new Actor_Live_Exception(
                'Signup data encryption failed',
                Actor_Exception::RUNTIME_ERROR
            );
        } else {
            $data[] = $s['data'];
            $data[] = $enc_keys['SKI'];
        }

        $data[] = $this->_form['iHIP'];
        $data[] = urlencode(implode('|', array(
            "HIPFrame={$captcha_data['hipfrtoken']}",
            "HIPChallenge0={$captcha_data['HIPChallenge']}",
            "recapResponse={$captcha_data['recaptcha_response']}",
            "HIPTime={$captcha_data['HIPTime']}"
        )));

        $data[] = $captcha_data['fid'];
        foreach (array(
            'iCountry',
            'iRegion',
            'iZipCode',
            'iBirthYear',
            'profile_gender',
            'iFirstName',
            'iLastName',
        ) as $k) {
            $data[] = !empty($this->_form[$k])
                ? $this->_form[$k]
                : '';
        }
        $data[] = -60 * rand(4, 6);  // Timezone offset in minutes
        $data[] = (int)isset($this->_form['imembernameeasi']);
        $data[] = (int)isset($this->_form['iOptinEmail']);
        $data[] = 0;
        return implode(urlencode('{~~$$}'), $data);
    }

    /**
     * Registers Live.com account
     *
     * @param string $email
     * @param string $pass
     * @param array  $details
     * @return bool
     */
    protected function _register($email, $pass, array $details)
    {
        if ($email) {
            // Use a 3rd party e-mail as Live ID
            $this->get(self::REG_HOST . self::REG_FORM_URL);
            $u = new Url($this->_connection->last_url);
            $common_query = $u->query;
        } else {
            // Create a new Live ID
            $this->get(self::HOST);
            $this->_dump('homepage.html');
            if (!preg_match('/var g_QS="(.+?)"/', $this->_response, $common_query)) {
                throw new Actor_Live_Exception(
                    'Common query string not found',
                    Actor_Exception::PROXY_BANNED
                );
            }

            $common_query = Url::parse_query(stripcslashes($common_query[1]));
            $common_query['rver'] = '5.5.4177.0';
            $common_query['wreply'] = self::HOME_HOST . '/';
            $common_query['lic'] = 1;
            $common_query['rollrs'] = 12;
            unset($common_query['lc'], $common_query['cbcxt']);

            $this->get(self::REG_HOST . self::REG_FORM_URL, $common_query);
        }

        for ($i = self::RETRY_COUNT; $i; $i--) {
            $this->_dump("form.{$i}.html");
            if (!$this->get_form('id', 'SignUpForm')) {
                throw new Actor_Live_Exception(
                    'Registration form not found',
                    Actor_Exception::PROXY_BANNED
                );
            }

            $enc_keys = array();
            foreach (array('Key', 'randomNum', 'SKI') as $k) {
                if (!preg_match(
                    '/var ' . preg_quote($k) . '="(.+?)";/',
                    $this->_response,
                    $m
                )) {
                    throw new Actor_Live_Exception(
                        "Encryption {$k} not found",
                        Actor_Exception::PROXY_BANNED
                    );
                } else {
                    $enc_keys[$k] = stripcslashes($m[1]);
                }
            }

            if ($email) {
                list($details['user_id'], $details['domain']) =
                    explode('@', $email, 2);
                $this->_form['imembernameeasi'] = $email;
                unset($this->_form['imembernamelive'],
                      $this->_form['idomain'],
                      $this->_form['iAltEmail'],
                      $this->_form['iSQ'],
                      $this->_form['iSA']);
            } else if (!$nodes = Html_Document::find(
                $this->_response,
                'select[@id = "idomain"]/option'
            )) {
                throw new Actor_Live_Exception(
                    'Domains list not found',
                    Actor_Exception::PROXY_BANNED
                );
            } else {
                $this->_form['idomain'] = $details['domain'] =
                    $nodes[array_rand($nodes)]->getAttribute('value');
                $this->_form['imembernamelive'] = $details['user_id'] =
                    Pool_Generator::generate_username($details, true, 64);
                unset($this->_form['imembernameeasi']);
            }
            if (!$this->is_email_available(
                "{$details['user_id']}@{$details['domain']}",
                $common_query,
                isset($this->_form['imembernameeasi'])
            )) {
                throw new Actor_Live_Exception(
                    "{$details['user_id']}@{$details['domain']} already registered",
                    Actor_Exception::INVALID_CREDENTIALS
                );
            }

            $this->_form['iPwd'] = $this->_form['iRetypePwd'] = $pass;

            $details = $this->_update_location($details);
            $this->_form['iFirstName'] = $details['first_name'];
            $this->_form['iLastName'] = $details['last_name'];
            $this->_form['iCountry'] = $details['country'];
            $this->_form['iRegion'] = $details['region_id'];
            $this->_form['iZipCode'] = $details['postal_code'];
            $this->_form['profile_gender'] = strtolower($details['gender']);
            $this->_form['iBirthYear'] = $details['birthday'][0];

            if (!$captcha = $this->_decode_recaptcha()) {
                continue;
            } else {
                $this->_form['iHIP'] = $captcha[1];
            }

            for ($j = 3; $j; $j--) {
                unset($this->_form["isug{$j}"]);
            }
            unset($this->_form['iOptinEmail']);

            $this->_dump("submit.{$i}.data.txt", $this->_form->to_array());

            $signup_data = str_replace('=', '%3D', $this->_encrypt_signup_data($enc_keys, $captcha[2]));
            $this->_connection->set_cookie(
                'signupdata',
                $signup_data,
                str_replace('https://', '', self::REG_HOST)
            );
            $this->_dump("submit.{$i}.cookie.txt", $signup_data . "\n" . urldecode($signup_data));

            $this->_connection->get(
                self::REG_HOST . self::REG_SUBMIT_URL,
                array_merge($common_query, array(
                    'sutk' => $this->_get_timestamp(),
                )),
                self::REG_HOST . self::REG_FORM_URL
            );
            $result = explode('~', $this->_connection->get_cookie('signupdata'), 3);
            $this->_dump("submit.{$i}.result.txt", $result);
            if ('loginurl' == $result[0]) {
                try {
                    $this->_dump('submit.redirect.html',
                                 $this->_connection->get(urldecode($result[1])));
                } catch (Actor_Exception $e) {
                    $this->log($e, Log_Abstract::LEVEL_ERROR);
                }
                $this->_user_id = $details['user_id'] . '@' . ltrim($details['domain'], '@');
                $this->_pass = $pass;
                return $details;
            } else if ('errorredirect' == $result[0]) {
                if (450 == $result[1]) {
                    throw new Actor_Live_Exception(
                        'Proxy overused',
                        Actor_Exception::PROXY_BANNED
                    );
                } else if (100 == $result[1]) {
                    throw new Actor_Live_Exception(
                        'Invalid signup data, check Actor_Live_Registrator::_encrypt_signup_data()',
                        Actor_Exception::INVALID_ARGUMENT
                    );
                } else {
                    throw new Actor_Live_Exception(
                        "Unknown service error {$result[1]}:{$result[2]}",
                        Actor_Exception::SERVICE_ERROR
                    );
                }
            }

            $result[1] = explode(',', $result[1]);
            if ('iPwdError' == $result[1][0]) {
                $this->log('Password encryption failed',
                           Log_Abstract::LEVEL_ERROR);
                break;
            } else if ('iHIPError' == $result[1][0]) {
                $this->log('Invalid CAPTCHA',
                           Log_Abstract::LEVEL_ERROR);
                $this->_get_captcha_decoder()->report($captcha[0], false);
                $captcha = false;
            } else if ('iZipCodeError' == $result[1][0]) {
                $this->log("Invalid {$details['country']} postal code {$details['postal_code']}",
                           Log_Abstract::LEVEL_ERROR);
                $details = $this->_update_location($details);
            }
        }

        return false;
    }


    /**
     * Checks if Live.com email is available
     *
     * @param string $email        E-mail to check for availability
     * @param string $common_query Common signup requests query
     * @return bool
     */
    public function is_email_available($email, $common_query, $is_easy_signup=false)
    {
        $this->log("Checking {$email} availability");

        $query = array_merge($common_query, array(
            'chkavail' => &$email,
            'tk'       => $this->_get_timestamp(),
        ));
        if ($is_easy_signup) {
            $query['chkeasi'] = 1;
        }
        $this->_connection->get(
            self::REG_HOST . self::CHECK_CREDENTIAL_URL,
            $query,
            self::REG_HOST . self::REG_FORM_URL
        );
        if (200 != $this->_connection->status_code) {
            throw new Actor_Live_Exception(
                'Network failure occured',
                Actor_Exception::NETWORK_ERROR
            );
        } else {
            $s = $this->_connection->get_cookie('CheckAvail');
            return 'Error_1006' == $s || ($is_easy_signup && 'Error_1078' == $s);
        }
    }

    public function register($email, $pass)
    {
        $this->log("Registering {$email}:{$pass}");

        $this->get(self::HOST . '/', null, self::HOST . '/');
        $this->_dump('homepage.html');
        if ($this->_connection->errno) {
            throw new Actor_Live_Exception(
                'Proxy seems banned',
                Actor_Exception::PROXY_BANNED
            );
        }
        if (!$details = $this->call_process_method('get_profile_details')) {
            $this->log('Profile details not found',
                       Log_Abstract::LEVEL_ERROR);
            return false;
        } else {
            if (empty($details['user_id'])) {
                $details['user_id'] =
                    Pool_Generator::generate_username($details, false, 64);
            }
            $details['secret_question'] =
                $this->call_process_method('get_secret_question');
        }

        $old_follow_refresh = $this->_connection->follow_refresh;
        $this->_connection->follow_refresh = false;
        try {
            $result = $this->_register($email, $pass, $details);
        } catch (Actor_Exception $e) {
            $result = $e;
        }
        $this->_connection->follow_refresh = $old_follow_refresh;

        if ($result instanceof Exception) {
            throw $result;
        } else {
            if (!$result) {
                $this->log('Registration failed',
                           Log_Abstract::LEVEL_ERROR);
            }
            return $result;
        }
    }
}
